package me.protocos.xteam.command.console;

import junit.framework.Assert;
import me.protocos.xteam.FakeXTeam;
import me.protocos.xteam.TeamPlugin;
import me.protocos.xteam.command.CommandContainer;
import me.protocos.xteam.command.ConsoleCommand;
import me.protocos.xteam.core.ITeamManager;
import me.protocos.xteam.fakeobjects.FakeConsoleSender;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class ConsoleOpenTest
{
	private TeamPlugin teamPlugin;
	private FakeConsoleSender fakeConsoleSender;
	private ConsoleCommand fakeCommand;
	private ITeamManager teamManager;

	@Before
	public void setup()
	{
		teamPlugin = FakeXTeam.asTeamPlugin();
		fakeConsoleSender = new FakeConsoleSender();
		fakeCommand = new ConsoleOpen(teamPlugin);
		teamManager = teamPlugin.getTeamManager();
	}

	@Test
	public void ShouldBeTeamConsoleOpen()
	{
		Assert.assertTrue("open TEAM".matches(fakeCommand.getPattern()));
		Assert.assertTrue("open TEAM ".matches(fakeCommand.getPattern()));
		Assert.assertTrue("open TEAM ".matches(fakeCommand.getPattern()));
		Assert.assertTrue("o TEAM ".matches(fakeCommand.getPattern()));
		Assert.assertTrue("op TEAM".matches(fakeCommand.getPattern()));
		Assert.assertFalse("open TEAM sdfhkabkl".matches(fakeCommand.getPattern()));
		Assert.assertTrue(fakeCommand.getUsage().replaceAll("[\\[\\]\\{\\}]", "").matches("/team " + fakeCommand.getPattern()));
	}

	@Test
	public void ShouldBeTeamConsoleExecute()
	{
		//ASSEMBLE
		//ACT
		boolean fakeExecuteResponse = fakeCommand.execute(new CommandContainer(fakeConsoleSender, "team", "open one".split(" ")));
		//ASSERT
		Assert.assertEquals("Open joining is now enabled for team one", fakeConsoleSender.getLastMessage());
		Assert.assertTrue(teamManager.getTeam("one").isOpenJoining());
		Assert.assertTrue(fakeExecuteResponse);
	}

	@After
	public void takedown()
	{
	}
}
