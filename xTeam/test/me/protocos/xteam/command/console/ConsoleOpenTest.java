package me.protocos.xteam.command.console;

import static me.protocos.xteam.StaticTestFunctions.mockData;
import junit.framework.Assert;
import me.protocos.xteam.xTeam;
import me.protocos.xteam.api.command.ConsoleCommand;
import me.protocos.xteam.api.fakeobjects.FakeConsoleSender;
import me.protocos.xteam.command.CommandParser;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class ConsoleOpenTest
{
	@Before
	public void setup()
	{
		//MOCK data
		mockData();
	}

	@Test
	public void ShouldBeTeamConsoleOpen()
	{
		Assert.assertTrue("open TEAM".matches(new ConsoleOpen().getPattern()));
		Assert.assertTrue("open TEAM ".matches(new ConsoleOpen().getPattern()));
		Assert.assertTrue("open TEAM ".matches(new ConsoleOpen().getPattern()));
		Assert.assertTrue("o TEAM ".matches(new ConsoleOpen().getPattern()));
		Assert.assertTrue("op TEAM".matches(new ConsoleOpen().getPattern()));
		Assert.assertFalse("open TEAM sdfhkabkl".matches(new ConsoleOpen().getPattern()));
		Assert.assertTrue(new ConsoleOpen().getUsage().replaceAll("[\\[\\]\\{\\}]", "").matches("/team " + new ConsoleOpen().getPattern()));
	}

	@Test
	public void ShouldBeTeamConsoleExecute()
	{
		//ASSEMBLE
		FakeConsoleSender fakeConsoleSender = new FakeConsoleSender();
		ConsoleCommand fakeCommand = new ConsoleOpen();
		//ACT
		boolean fakeExecuteResponse = fakeCommand.execute(fakeConsoleSender, new CommandParser("/team open one"));
		//ASSERT
		Assert.assertEquals("Open joining is now enabled for team one", fakeConsoleSender.getLastMessage());
		Assert.assertTrue(xTeam.getInstance().getTeamManager().getTeam("one").isOpenJoining());
		Assert.assertTrue(fakeExecuteResponse);
	}

	@After
	public void takedown()
	{
	}
}
